generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id                Int                @id @default(autoincrement())
  memberName        String
  profileImgURL     String             @db.VarChar(300)
  githubURL         String             @db.VarChar(300)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
  status            String             @default("ACTIVE")
  activityEnrolls   ActivityEnroll[]
  memberSeasonInfos MemberSeasonInfo[]
}

model Activity {
  id              Int              @id @default(autoincrement())
  type            Type
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  status          String           @default("ACTIVE")
  activityName    String
  activityEnrolls ActivityEnroll[]
  githubURLs      Github[]
}

model Github {
  githubId   Int       @id @default(autoincrement())
  activityId Int
  githubURL  String    @db.VarChar(300)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  status     String    @default("ACTIVE")
  activity   Activity  @relation(fields: [activityId], references: [id])

  @@index([activityId], map: "Github_activityId_fkey")
}

model ActivityEnroll {
  id         Int       @id @default(autoincrement())
  activityId Int
  memberId   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  status     String    @default("ACTIVE")
  activity   Activity  @relation(fields: [activityId], references: [id])
  member     Member    @relation(fields: [memberId], references: [id])

  @@index([activityId], map: "ActivityEnroll_activityId_fkey")
  @@index([memberId], map: "ActivityEnroll_memberId_fkey")
}

model Season {
  id                Int                @id @default(autoincrement())
  seasonNum         Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
  status            String             @default("ACTIVE")
  memberSeasonInfos MemberSeasonInfo[]
}

model MemberSeasonInfo {
  id         Int                         @id @default(autoincrement())
  seasonNum  Int
  memberRole Role
  activityId Int
  seasonId   Int
  memberId   Int
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime?
  status     String                      @default("ACTIVE")
  memberPart MemberSeasonInfo_memverPart
  member     Member                      @relation(fields: [memberId], references: [id])
  season     Season                      @relation(fields: [seasonId], references: [id])

  @@index([memberId], map: "MemberSeasonInfo_memberId_fkey")
  @@index([seasonId], map: "MemberSeasonInfo_seasonId_fkey")
}

enum Type {
  STUDY
  PROJECT
}

enum Role {
  LEAD
  CORE_MEMBER
  MEMBER
}

enum MemberSeasonInfo_memverPart {
  WEB_MOBILE
  SERVER_CLOUD
  AI
}
